Classes
-------

Value
  * BasicValue
      * Number
      * String
  * Array
      Relations:
        - hasValue some Value
        - hasDimension some Dimension
      Subclasses:
        * NumericArray
            hasSpatialPart some Number
            * Matrix
                hasDimension exactly 2 Dimension
  * CompoundValue
      A combination of primitive and array values, like C struct's and
      Python dict's.  May be constructed with multiple hasValue relations:
      hasValue some Value
  * NumericValue
      The union of Number and NumericArray.

Number
  * Natural
  * Integer
  * Rational
      * Float
  * Real
  * Complex
  * Quaternion
  * Octonion       (for Georg :-)


Dimension
  Dimensions have a size and may be chained (using hasNextDimension)
  to provide an ordered list of dimensions.  Tensor dimensions may be
  either covariant or contravariant.
  Relations:
    - hasValue some Natural               (or exactly 1?)
    - hasNextDimension some Dimension     (or max 1?)
  Subclasses:
    * CovariantDimension
    * ContravariantDimension


Tensor
  Is a PhysicalQuantity with some Dimension (hasDimension some Dimension).
  Subclasses:
    * Scalar
        A Tensor of rank 0 (hasDimension exactly 0 Dimension)
    * Vector
        A Tensor of rank 1 (hasDimension exactly 1 Dimension)


PhyscalQuantity
  Update relations:
    - hasValue some NumericValue
    - hasUnit some Unit


Relations
---------

hasValue
  subclass of: hasSpatialPart
  domain: Item
  range: Value

hasDimension
  Cardinality may be used to specify exact, max or min size of a dimension.
  Otherwise the dimension size must be assigned at instantiation.
  subclass of: hasSpatialPart
  domain: Array or Property?
  range: Dimension

hasNextDimension
  subclass of: hasSpatialPart
  domain: Dimension
  range: Dimension

hasPreviousDimension
  subclass of: hasSpatialPart
  inverse: hasNextDimension
  domain: Dimension
  range: Dimension


Questions
=========
* Do we need a Datatype class?
